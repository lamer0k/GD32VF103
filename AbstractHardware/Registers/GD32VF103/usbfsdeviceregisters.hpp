/*******************************************************************************
* Filename      : usbfsdeviceregisters.hpp
*
* Details       : USB on the go full speed device. This header file is
*                 auto-generated for GD32VF103 device.
*
*
*******************************************************************************/

#if !defined(USBFSDEVICEREGISTERS_HPP)
#define USBFSDEVICEREGISTERS_HPP

#include "usbfsdevicefieldvalues.hpp"  //for Bits Fields defs 
#include "registerbase.hpp"   //for RegisterBase
#include "register.hpp"       //for Register
#include "accessmode.hpp"     //for ReadMode, WriteMode, ReadWriteMode  

struct USBFS_DEVICE
{
  struct USBFS_DEVICEDCFGBase {} ;

  struct DCFG : public RegisterBase<0x50000800, 32, ReadWriteMode>
  {
    using DS = USBFS_DEVICE_DCFG_DS_Values<USBFS_DEVICE::DCFG, 0, 2, ReadWriteMode, USBFS_DEVICEDCFGBase> ;
    using NZLSOH = USBFS_DEVICE_DCFG_NZLSOH_Values<USBFS_DEVICE::DCFG, 2, 1, ReadWriteMode, USBFS_DEVICEDCFGBase> ;
    using DAR = USBFS_DEVICE_DCFG_DAR_Values<USBFS_DEVICE::DCFG, 4, 7, ReadWriteMode, USBFS_DEVICEDCFGBase> ;
    using EOPFT = USBFS_DEVICE_DCFG_EOPFT_Values<USBFS_DEVICE::DCFG, 11, 2, ReadWriteMode, USBFS_DEVICEDCFGBase> ;
    using FieldValues = USBFS_DEVICE_DCFG_EOPFT_Values<USBFS_DEVICE::DCFG, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DCFGPack  = Register<0x50000800, 32, ReadWriteMode, USBFS_DEVICEDCFGBase, T...> ;

  struct USBFS_DEVICEDCTLBase {} ;

  struct DCTL : public RegisterBase<0x50000804, 32, ReadWriteMode>
  {
    using RWKUP = USBFS_DEVICE_DCTL_RWKUP_Values<USBFS_DEVICE::DCTL, 0, 1, ReadWriteMode, USBFS_DEVICEDCTLBase> ;
    using SD = USBFS_DEVICE_DCTL_SD_Values<USBFS_DEVICE::DCTL, 1, 1, ReadWriteMode, USBFS_DEVICEDCTLBase> ;
    using GINS = USBFS_DEVICE_DCTL_GINS_Values<USBFS_DEVICE::DCTL, 2, 1, ReadMode, USBFS_DEVICEDCTLBase> ;
    using GONS = USBFS_DEVICE_DCTL_GONS_Values<USBFS_DEVICE::DCTL, 3, 1, ReadMode, USBFS_DEVICEDCTLBase> ;
    using SGINAK = USBFS_DEVICE_DCTL_SGINAK_Values<USBFS_DEVICE::DCTL, 7, 1, WriteMode, USBFS_DEVICEDCTLBase> ;
    using CGINAK = USBFS_DEVICE_DCTL_CGINAK_Values<USBFS_DEVICE::DCTL, 8, 1, WriteMode, USBFS_DEVICEDCTLBase> ;
    using SGONAK = USBFS_DEVICE_DCTL_SGONAK_Values<USBFS_DEVICE::DCTL, 9, 1, WriteMode, USBFS_DEVICEDCTLBase> ;
    using CGONAK = USBFS_DEVICE_DCTL_CGONAK_Values<USBFS_DEVICE::DCTL, 10, 1, WriteMode, USBFS_DEVICEDCTLBase> ;
    using POIF = USBFS_DEVICE_DCTL_POIF_Values<USBFS_DEVICE::DCTL, 11, 1, ReadWriteMode, USBFS_DEVICEDCTLBase> ;
    using FieldValues = USBFS_DEVICE_DCTL_POIF_Values<USBFS_DEVICE::DCTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DCTLPack  = Register<0x50000804, 32, ReadWriteMode, USBFS_DEVICEDCTLBase, T...> ;

  struct USBFS_DEVICEDSTATBase {} ;

  struct DSTAT : public RegisterBase<0x50000808, 32, ReadMode>
  {
    using SPST = USBFS_DEVICE_DSTAT_SPST_Values<USBFS_DEVICE::DSTAT, 0, 1, ReadMode, USBFS_DEVICEDSTATBase> ;
    using ES = USBFS_DEVICE_DSTAT_ES_Values<USBFS_DEVICE::DSTAT, 1, 2, ReadMode, USBFS_DEVICEDSTATBase> ;
    using FNRSOF = USBFS_DEVICE_DSTAT_FNRSOF_Values<USBFS_DEVICE::DSTAT, 8, 14, ReadMode, USBFS_DEVICEDSTATBase> ;
    using FieldValues = USBFS_DEVICE_DSTAT_FNRSOF_Values<USBFS_DEVICE::DSTAT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DSTATPack  = Register<0x50000808, 32, ReadMode, USBFS_DEVICEDSTATBase, T...> ;

  struct USBFS_DEVICEDIEPINTENBase {} ;

  struct DIEPINTEN : public RegisterBase<0x50000810, 32, ReadWriteMode>
  {
    using TFEN = USBFS_DEVICE_DIEPINTEN_TFEN_Values<USBFS_DEVICE::DIEPINTEN, 0, 1, ReadWriteMode, USBFS_DEVICEDIEPINTENBase> ;
    using EPDISEN = USBFS_DEVICE_DIEPINTEN_EPDISEN_Values<USBFS_DEVICE::DIEPINTEN, 1, 1, ReadWriteMode, USBFS_DEVICEDIEPINTENBase> ;
    using CITOEN = USBFS_DEVICE_DIEPINTEN_CITOEN_Values<USBFS_DEVICE::DIEPINTEN, 3, 1, ReadWriteMode, USBFS_DEVICEDIEPINTENBase> ;
    using EPTXFUDEN = USBFS_DEVICE_DIEPINTEN_EPTXFUDEN_Values<USBFS_DEVICE::DIEPINTEN, 4, 1, ReadWriteMode, USBFS_DEVICEDIEPINTENBase> ;
    using IEPNEEN = USBFS_DEVICE_DIEPINTEN_IEPNEEN_Values<USBFS_DEVICE::DIEPINTEN, 6, 1, ReadWriteMode, USBFS_DEVICEDIEPINTENBase> ;
    using FieldValues = USBFS_DEVICE_DIEPINTEN_IEPNEEN_Values<USBFS_DEVICE::DIEPINTEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEPINTENPack  = Register<0x50000810, 32, ReadWriteMode, USBFS_DEVICEDIEPINTENBase, T...> ;

  struct USBFS_DEVICEDOEPINTENBase {} ;

  struct DOEPINTEN : public RegisterBase<0x50000814, 32, ReadWriteMode>
  {
    using TFEN = USBFS_DEVICE_DOEPINTEN_TFEN_Values<USBFS_DEVICE::DOEPINTEN, 0, 1, ReadWriteMode, USBFS_DEVICEDOEPINTENBase> ;
    using EPDISEN = USBFS_DEVICE_DOEPINTEN_EPDISEN_Values<USBFS_DEVICE::DOEPINTEN, 1, 1, ReadWriteMode, USBFS_DEVICEDOEPINTENBase> ;
    using STPFEN = USBFS_DEVICE_DOEPINTEN_STPFEN_Values<USBFS_DEVICE::DOEPINTEN, 3, 1, ReadWriteMode, USBFS_DEVICEDOEPINTENBase> ;
    using EPRXFOVREN = USBFS_DEVICE_DOEPINTEN_EPRXFOVREN_Values<USBFS_DEVICE::DOEPINTEN, 4, 1, ReadWriteMode, USBFS_DEVICEDOEPINTENBase> ;
    using BTBSTPEN = USBFS_DEVICE_DOEPINTEN_BTBSTPEN_Values<USBFS_DEVICE::DOEPINTEN, 6, 1, ReadWriteMode, USBFS_DEVICEDOEPINTENBase> ;
    using FieldValues = USBFS_DEVICE_DOEPINTEN_BTBSTPEN_Values<USBFS_DEVICE::DOEPINTEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEPINTENPack  = Register<0x50000814, 32, ReadWriteMode, USBFS_DEVICEDOEPINTENBase, T...> ;

  struct USBFS_DEVICEDAEPINTBase {} ;

  struct DAEPINT : public RegisterBase<0x50000818, 32, ReadMode>
  {
    using IEPITB = USBFS_DEVICE_DAEPINT_IEPITB_Values<USBFS_DEVICE::DAEPINT, 0, 4, ReadMode, USBFS_DEVICEDAEPINTBase> ;
    using OEPITB = USBFS_DEVICE_DAEPINT_OEPITB_Values<USBFS_DEVICE::DAEPINT, 16, 4, ReadMode, USBFS_DEVICEDAEPINTBase> ;
    using FieldValues = USBFS_DEVICE_DAEPINT_OEPITB_Values<USBFS_DEVICE::DAEPINT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DAEPINTPack  = Register<0x50000818, 32, ReadMode, USBFS_DEVICEDAEPINTBase, T...> ;

  struct USBFS_DEVICEDAEPINTENBase {} ;

  struct DAEPINTEN : public RegisterBase<0x5000081C, 32, ReadWriteMode>
  {
    using IEPIE = USBFS_DEVICE_DAEPINTEN_IEPIE_Values<USBFS_DEVICE::DAEPINTEN, 0, 4, ReadWriteMode, USBFS_DEVICEDAEPINTENBase> ;
    using OEPIE = USBFS_DEVICE_DAEPINTEN_OEPIE_Values<USBFS_DEVICE::DAEPINTEN, 16, 4, ReadWriteMode, USBFS_DEVICEDAEPINTENBase> ;
    using FieldValues = USBFS_DEVICE_DAEPINTEN_OEPIE_Values<USBFS_DEVICE::DAEPINTEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DAEPINTENPack  = Register<0x5000081C, 32, ReadWriteMode, USBFS_DEVICEDAEPINTENBase, T...> ;

  struct USBFS_DEVICEDVBUSDTBase {} ;

  struct DVBUSDT : public RegisterBase<0x50000828, 32, ReadWriteMode>
  {
    using DVBUSDTField = USBFS_DEVICE_DVBUSDT_DVBUSDT_Values<USBFS_DEVICE::DVBUSDT, 0, 16, ReadWriteMode, USBFS_DEVICEDVBUSDTBase> ;
    using FieldValues = USBFS_DEVICE_DVBUSDT_DVBUSDT_Values<USBFS_DEVICE::DVBUSDT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DVBUSDTPack  = Register<0x50000828, 32, ReadWriteMode, USBFS_DEVICEDVBUSDTBase, T...> ;

  struct USBFS_DEVICEDVBUSPTBase {} ;

  struct DVBUSPT : public RegisterBase<0x5000082C, 32, ReadWriteMode>
  {
    using DVBUSPTField = USBFS_DEVICE_DVBUSPT_DVBUSPT_Values<USBFS_DEVICE::DVBUSPT, 0, 12, ReadWriteMode, USBFS_DEVICEDVBUSPTBase> ;
    using FieldValues = USBFS_DEVICE_DVBUSPT_DVBUSPT_Values<USBFS_DEVICE::DVBUSPT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DVBUSPTPack  = Register<0x5000082C, 32, ReadWriteMode, USBFS_DEVICEDVBUSPTBase, T...> ;

  struct USBFS_DEVICEDIEPFEINTENBase {} ;

  struct DIEPFEINTEN : public RegisterBase<0x50000834, 32, ReadWriteMode>
  {
    using IEPTXFEIE = USBFS_DEVICE_DIEPFEINTEN_IEPTXFEIE_Values<USBFS_DEVICE::DIEPFEINTEN, 0, 4, ReadWriteMode, USBFS_DEVICEDIEPFEINTENBase> ;
    using FieldValues = USBFS_DEVICE_DIEPFEINTEN_IEPTXFEIE_Values<USBFS_DEVICE::DIEPFEINTEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEPFEINTENPack  = Register<0x50000834, 32, ReadWriteMode, USBFS_DEVICEDIEPFEINTENBase, T...> ;

  struct USBFS_DEVICEDIEP0CTLBase {} ;

  struct DIEP0CTL : public RegisterBase<0x50000900, 32, ReadWriteMode>
  {
    using MPL = USBFS_DEVICE_DIEP0CTL_MPL_Values<USBFS_DEVICE::DIEP0CTL, 0, 2, ReadWriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using EPACT = USBFS_DEVICE_DIEP0CTL_EPACT_Values<USBFS_DEVICE::DIEP0CTL, 15, 1, ReadMode, USBFS_DEVICEDIEP0CTLBase> ;
    using NAKS = USBFS_DEVICE_DIEP0CTL_NAKS_Values<USBFS_DEVICE::DIEP0CTL, 17, 1, ReadMode, USBFS_DEVICEDIEP0CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DIEP0CTL_EPTYPE_Values<USBFS_DEVICE::DIEP0CTL, 18, 2, ReadMode, USBFS_DEVICEDIEP0CTLBase> ;
    using STALL = USBFS_DEVICE_DIEP0CTL_STALL_Values<USBFS_DEVICE::DIEP0CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using TXFNUM = USBFS_DEVICE_DIEP0CTL_TXFNUM_Values<USBFS_DEVICE::DIEP0CTL, 22, 4, ReadWriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using CNAK = USBFS_DEVICE_DIEP0CTL_CNAK_Values<USBFS_DEVICE::DIEP0CTL, 26, 1, WriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using SNAK = USBFS_DEVICE_DIEP0CTL_SNAK_Values<USBFS_DEVICE::DIEP0CTL, 27, 1, WriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using EPD = USBFS_DEVICE_DIEP0CTL_EPD_Values<USBFS_DEVICE::DIEP0CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using EPEN = USBFS_DEVICE_DIEP0CTL_EPEN_Values<USBFS_DEVICE::DIEP0CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDIEP0CTLBase> ;
    using FieldValues = USBFS_DEVICE_DIEP0CTL_EPEN_Values<USBFS_DEVICE::DIEP0CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP0CTLPack  = Register<0x50000900, 32, ReadWriteMode, USBFS_DEVICEDIEP0CTLBase, T...> ;

  struct USBFS_DEVICEDIEP1CTLBase {} ;

  struct DIEP1CTL : public RegisterBase<0x50000920, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DIEP1CTL_EPEN_Values<USBFS_DEVICE::DIEP1CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using EPD = USBFS_DEVICE_DIEP1CTL_EPD_Values<USBFS_DEVICE::DIEP1CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using SD1PID_SODDFRM = USBFS_DEVICE_DIEP1CTL_SD1PID_SODDFRM_Values<USBFS_DEVICE::DIEP1CTL, 29, 1, WriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using SD0PID_SEVENFRM = USBFS_DEVICE_DIEP1CTL_SD0PID_SEVENFRM_Values<USBFS_DEVICE::DIEP1CTL, 28, 1, WriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using SNAK = USBFS_DEVICE_DIEP1CTL_SNAK_Values<USBFS_DEVICE::DIEP1CTL, 27, 1, WriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using CNAK = USBFS_DEVICE_DIEP1CTL_CNAK_Values<USBFS_DEVICE::DIEP1CTL, 26, 1, WriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using TXFNUM = USBFS_DEVICE_DIEP1CTL_TXFNUM_Values<USBFS_DEVICE::DIEP1CTL, 22, 4, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using STALL = USBFS_DEVICE_DIEP1CTL_STALL_Values<USBFS_DEVICE::DIEP1CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DIEP1CTL_EPTYPE_Values<USBFS_DEVICE::DIEP1CTL, 18, 2, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using NAKS = USBFS_DEVICE_DIEP1CTL_NAKS_Values<USBFS_DEVICE::DIEP1CTL, 17, 1, ReadMode, USBFS_DEVICEDIEP1CTLBase> ;
    using EOFRM_DPID = USBFS_DEVICE_DIEP1CTL_EOFRM_DPID_Values<USBFS_DEVICE::DIEP1CTL, 16, 1, ReadMode, USBFS_DEVICEDIEP1CTLBase> ;
    using EPACT = USBFS_DEVICE_DIEP1CTL_EPACT_Values<USBFS_DEVICE::DIEP1CTL, 15, 1, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using MPL = USBFS_DEVICE_DIEP1CTL_MPL_Values<USBFS_DEVICE::DIEP1CTL, 0, 11, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase> ;
    using FieldValues = USBFS_DEVICE_DIEP1CTL_MPL_Values<USBFS_DEVICE::DIEP1CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP1CTLPack  = Register<0x50000920, 32, ReadWriteMode, USBFS_DEVICEDIEP1CTLBase, T...> ;

  struct USBFS_DEVICEDIEP2CTLBase {} ;

  struct DIEP2CTL : public RegisterBase<0x50000940, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DIEP2CTL_EPEN_Values<USBFS_DEVICE::DIEP2CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using EPD = USBFS_DEVICE_DIEP2CTL_EPD_Values<USBFS_DEVICE::DIEP2CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using SD1PID_SODDFRM = USBFS_DEVICE_DIEP2CTL_SD1PID_SODDFRM_Values<USBFS_DEVICE::DIEP2CTL, 29, 1, WriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using SD0PID_SEVENFRM = USBFS_DEVICE_DIEP2CTL_SD0PID_SEVENFRM_Values<USBFS_DEVICE::DIEP2CTL, 28, 1, WriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using SNAK = USBFS_DEVICE_DIEP2CTL_SNAK_Values<USBFS_DEVICE::DIEP2CTL, 27, 1, WriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using CNAK = USBFS_DEVICE_DIEP2CTL_CNAK_Values<USBFS_DEVICE::DIEP2CTL, 26, 1, WriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using TXFNUM = USBFS_DEVICE_DIEP2CTL_TXFNUM_Values<USBFS_DEVICE::DIEP2CTL, 22, 4, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using STALL = USBFS_DEVICE_DIEP2CTL_STALL_Values<USBFS_DEVICE::DIEP2CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DIEP2CTL_EPTYPE_Values<USBFS_DEVICE::DIEP2CTL, 18, 2, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using NAKS = USBFS_DEVICE_DIEP2CTL_NAKS_Values<USBFS_DEVICE::DIEP2CTL, 17, 1, ReadMode, USBFS_DEVICEDIEP2CTLBase> ;
    using EOFRM_DPID = USBFS_DEVICE_DIEP2CTL_EOFRM_DPID_Values<USBFS_DEVICE::DIEP2CTL, 16, 1, ReadMode, USBFS_DEVICEDIEP2CTLBase> ;
    using EPACT = USBFS_DEVICE_DIEP2CTL_EPACT_Values<USBFS_DEVICE::DIEP2CTL, 15, 1, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using MPL = USBFS_DEVICE_DIEP2CTL_MPL_Values<USBFS_DEVICE::DIEP2CTL, 0, 11, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase> ;
    using FieldValues = USBFS_DEVICE_DIEP2CTL_MPL_Values<USBFS_DEVICE::DIEP2CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP2CTLPack  = Register<0x50000940, 32, ReadWriteMode, USBFS_DEVICEDIEP2CTLBase, T...> ;

  struct USBFS_DEVICEDIEP3CTLBase {} ;

  struct DIEP3CTL : public RegisterBase<0x50000960, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DIEP3CTL_EPEN_Values<USBFS_DEVICE::DIEP3CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using EPD = USBFS_DEVICE_DIEP3CTL_EPD_Values<USBFS_DEVICE::DIEP3CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using SD1PID_SODDFRM = USBFS_DEVICE_DIEP3CTL_SD1PID_SODDFRM_Values<USBFS_DEVICE::DIEP3CTL, 29, 1, WriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using SD0PID_SEVENFRM = USBFS_DEVICE_DIEP3CTL_SD0PID_SEVENFRM_Values<USBFS_DEVICE::DIEP3CTL, 28, 1, WriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using SNAK = USBFS_DEVICE_DIEP3CTL_SNAK_Values<USBFS_DEVICE::DIEP3CTL, 27, 1, WriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using CNAK = USBFS_DEVICE_DIEP3CTL_CNAK_Values<USBFS_DEVICE::DIEP3CTL, 26, 1, WriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using TXFNUM = USBFS_DEVICE_DIEP3CTL_TXFNUM_Values<USBFS_DEVICE::DIEP3CTL, 22, 4, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using STALL = USBFS_DEVICE_DIEP3CTL_STALL_Values<USBFS_DEVICE::DIEP3CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DIEP3CTL_EPTYPE_Values<USBFS_DEVICE::DIEP3CTL, 18, 2, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using NAKS = USBFS_DEVICE_DIEP3CTL_NAKS_Values<USBFS_DEVICE::DIEP3CTL, 17, 1, ReadMode, USBFS_DEVICEDIEP3CTLBase> ;
    using EOFRM_DPID = USBFS_DEVICE_DIEP3CTL_EOFRM_DPID_Values<USBFS_DEVICE::DIEP3CTL, 16, 1, ReadMode, USBFS_DEVICEDIEP3CTLBase> ;
    using EPACT = USBFS_DEVICE_DIEP3CTL_EPACT_Values<USBFS_DEVICE::DIEP3CTL, 15, 1, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using MPL = USBFS_DEVICE_DIEP3CTL_MPL_Values<USBFS_DEVICE::DIEP3CTL, 0, 11, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase> ;
    using FieldValues = USBFS_DEVICE_DIEP3CTL_MPL_Values<USBFS_DEVICE::DIEP3CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP3CTLPack  = Register<0x50000960, 32, ReadWriteMode, USBFS_DEVICEDIEP3CTLBase, T...> ;

  struct USBFS_DEVICEDOEP0CTLBase {} ;

  struct DOEP0CTL : public RegisterBase<0x50000B00, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DOEP0CTL_EPEN_Values<USBFS_DEVICE::DOEP0CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDOEP0CTLBase> ;
    using EPD = USBFS_DEVICE_DOEP0CTL_EPD_Values<USBFS_DEVICE::DOEP0CTL, 30, 1, ReadMode, USBFS_DEVICEDOEP0CTLBase> ;
    using SNAK = USBFS_DEVICE_DOEP0CTL_SNAK_Values<USBFS_DEVICE::DOEP0CTL, 27, 1, WriteMode, USBFS_DEVICEDOEP0CTLBase> ;
    using CNAK = USBFS_DEVICE_DOEP0CTL_CNAK_Values<USBFS_DEVICE::DOEP0CTL, 26, 1, WriteMode, USBFS_DEVICEDOEP0CTLBase> ;
    using STALL = USBFS_DEVICE_DOEP0CTL_STALL_Values<USBFS_DEVICE::DOEP0CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDOEP0CTLBase> ;
    using SNOOP = USBFS_DEVICE_DOEP0CTL_SNOOP_Values<USBFS_DEVICE::DOEP0CTL, 20, 1, ReadWriteMode, USBFS_DEVICEDOEP0CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DOEP0CTL_EPTYPE_Values<USBFS_DEVICE::DOEP0CTL, 18, 2, ReadMode, USBFS_DEVICEDOEP0CTLBase> ;
    using NAKS = USBFS_DEVICE_DOEP0CTL_NAKS_Values<USBFS_DEVICE::DOEP0CTL, 17, 1, ReadMode, USBFS_DEVICEDOEP0CTLBase> ;
    using EPACT = USBFS_DEVICE_DOEP0CTL_EPACT_Values<USBFS_DEVICE::DOEP0CTL, 15, 1, ReadMode, USBFS_DEVICEDOEP0CTLBase> ;
    using MPL = USBFS_DEVICE_DOEP0CTL_MPL_Values<USBFS_DEVICE::DOEP0CTL, 0, 2, ReadMode, USBFS_DEVICEDOEP0CTLBase> ;
    using FieldValues = USBFS_DEVICE_DOEP0CTL_MPL_Values<USBFS_DEVICE::DOEP0CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP0CTLPack  = Register<0x50000B00, 32, ReadWriteMode, USBFS_DEVICEDOEP0CTLBase, T...> ;

  struct USBFS_DEVICEDOEP1CTLBase {} ;

  struct DOEP1CTL : public RegisterBase<0x50000B20, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DOEP1CTL_EPEN_Values<USBFS_DEVICE::DOEP1CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using EPD = USBFS_DEVICE_DOEP1CTL_EPD_Values<USBFS_DEVICE::DOEP1CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using SD1PID_SODDFRM = USBFS_DEVICE_DOEP1CTL_SD1PID_SODDFRM_Values<USBFS_DEVICE::DOEP1CTL, 29, 1, WriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using SD0PID_SEVENFRM = USBFS_DEVICE_DOEP1CTL_SD0PID_SEVENFRM_Values<USBFS_DEVICE::DOEP1CTL, 28, 1, WriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using SNAK = USBFS_DEVICE_DOEP1CTL_SNAK_Values<USBFS_DEVICE::DOEP1CTL, 27, 1, WriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using CNAK = USBFS_DEVICE_DOEP1CTL_CNAK_Values<USBFS_DEVICE::DOEP1CTL, 26, 1, WriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using STALL = USBFS_DEVICE_DOEP1CTL_STALL_Values<USBFS_DEVICE::DOEP1CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using SNOOP = USBFS_DEVICE_DOEP1CTL_SNOOP_Values<USBFS_DEVICE::DOEP1CTL, 20, 1, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DOEP1CTL_EPTYPE_Values<USBFS_DEVICE::DOEP1CTL, 18, 2, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using NAKS = USBFS_DEVICE_DOEP1CTL_NAKS_Values<USBFS_DEVICE::DOEP1CTL, 17, 1, ReadMode, USBFS_DEVICEDOEP1CTLBase> ;
    using EOFRM_DPID = USBFS_DEVICE_DOEP1CTL_EOFRM_DPID_Values<USBFS_DEVICE::DOEP1CTL, 16, 1, ReadMode, USBFS_DEVICEDOEP1CTLBase> ;
    using EPACT = USBFS_DEVICE_DOEP1CTL_EPACT_Values<USBFS_DEVICE::DOEP1CTL, 15, 1, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using MPL = USBFS_DEVICE_DOEP1CTL_MPL_Values<USBFS_DEVICE::DOEP1CTL, 0, 11, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase> ;
    using FieldValues = USBFS_DEVICE_DOEP1CTL_MPL_Values<USBFS_DEVICE::DOEP1CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP1CTLPack  = Register<0x50000B20, 32, ReadWriteMode, USBFS_DEVICEDOEP1CTLBase, T...> ;

  struct USBFS_DEVICEDOEP2CTLBase {} ;

  struct DOEP2CTL : public RegisterBase<0x50000B40, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DOEP2CTL_EPEN_Values<USBFS_DEVICE::DOEP2CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using EPD = USBFS_DEVICE_DOEP2CTL_EPD_Values<USBFS_DEVICE::DOEP2CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using SD1PID_SODDFRM = USBFS_DEVICE_DOEP2CTL_SD1PID_SODDFRM_Values<USBFS_DEVICE::DOEP2CTL, 29, 1, WriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using SD0PID_SEVENFRM = USBFS_DEVICE_DOEP2CTL_SD0PID_SEVENFRM_Values<USBFS_DEVICE::DOEP2CTL, 28, 1, WriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using SNAK = USBFS_DEVICE_DOEP2CTL_SNAK_Values<USBFS_DEVICE::DOEP2CTL, 27, 1, WriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using CNAK = USBFS_DEVICE_DOEP2CTL_CNAK_Values<USBFS_DEVICE::DOEP2CTL, 26, 1, WriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using STALL = USBFS_DEVICE_DOEP2CTL_STALL_Values<USBFS_DEVICE::DOEP2CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using SNOOP = USBFS_DEVICE_DOEP2CTL_SNOOP_Values<USBFS_DEVICE::DOEP2CTL, 20, 1, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DOEP2CTL_EPTYPE_Values<USBFS_DEVICE::DOEP2CTL, 18, 2, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using NAKS = USBFS_DEVICE_DOEP2CTL_NAKS_Values<USBFS_DEVICE::DOEP2CTL, 17, 1, ReadMode, USBFS_DEVICEDOEP2CTLBase> ;
    using EOFRM_DPID = USBFS_DEVICE_DOEP2CTL_EOFRM_DPID_Values<USBFS_DEVICE::DOEP2CTL, 16, 1, ReadMode, USBFS_DEVICEDOEP2CTLBase> ;
    using EPACT = USBFS_DEVICE_DOEP2CTL_EPACT_Values<USBFS_DEVICE::DOEP2CTL, 15, 1, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using MPL = USBFS_DEVICE_DOEP2CTL_MPL_Values<USBFS_DEVICE::DOEP2CTL, 0, 11, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase> ;
    using FieldValues = USBFS_DEVICE_DOEP2CTL_MPL_Values<USBFS_DEVICE::DOEP2CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP2CTLPack  = Register<0x50000B40, 32, ReadWriteMode, USBFS_DEVICEDOEP2CTLBase, T...> ;

  struct USBFS_DEVICEDOEP3CTLBase {} ;

  struct DOEP3CTL : public RegisterBase<0x50000B60, 32, ReadWriteMode>
  {
    using EPEN = USBFS_DEVICE_DOEP3CTL_EPEN_Values<USBFS_DEVICE::DOEP3CTL, 31, 1, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using EPD = USBFS_DEVICE_DOEP3CTL_EPD_Values<USBFS_DEVICE::DOEP3CTL, 30, 1, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using SD1PID_SODDFRM = USBFS_DEVICE_DOEP3CTL_SD1PID_SODDFRM_Values<USBFS_DEVICE::DOEP3CTL, 29, 1, WriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using SD0PID_SEVENFRM = USBFS_DEVICE_DOEP3CTL_SD0PID_SEVENFRM_Values<USBFS_DEVICE::DOEP3CTL, 28, 1, WriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using SNAK = USBFS_DEVICE_DOEP3CTL_SNAK_Values<USBFS_DEVICE::DOEP3CTL, 27, 1, WriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using CNAK = USBFS_DEVICE_DOEP3CTL_CNAK_Values<USBFS_DEVICE::DOEP3CTL, 26, 1, WriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using STALL = USBFS_DEVICE_DOEP3CTL_STALL_Values<USBFS_DEVICE::DOEP3CTL, 21, 1, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using SNOOP = USBFS_DEVICE_DOEP3CTL_SNOOP_Values<USBFS_DEVICE::DOEP3CTL, 20, 1, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using EPTYPE = USBFS_DEVICE_DOEP3CTL_EPTYPE_Values<USBFS_DEVICE::DOEP3CTL, 18, 2, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using NAKS = USBFS_DEVICE_DOEP3CTL_NAKS_Values<USBFS_DEVICE::DOEP3CTL, 17, 1, ReadMode, USBFS_DEVICEDOEP3CTLBase> ;
    using EOFRM_DPID = USBFS_DEVICE_DOEP3CTL_EOFRM_DPID_Values<USBFS_DEVICE::DOEP3CTL, 16, 1, ReadMode, USBFS_DEVICEDOEP3CTLBase> ;
    using EPACT = USBFS_DEVICE_DOEP3CTL_EPACT_Values<USBFS_DEVICE::DOEP3CTL, 15, 1, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using MPL = USBFS_DEVICE_DOEP3CTL_MPL_Values<USBFS_DEVICE::DOEP3CTL, 0, 11, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase> ;
    using FieldValues = USBFS_DEVICE_DOEP3CTL_MPL_Values<USBFS_DEVICE::DOEP3CTL, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP3CTLPack  = Register<0x50000B60, 32, ReadWriteMode, USBFS_DEVICEDOEP3CTLBase, T...> ;

  struct USBFS_DEVICEDIEP0INTFBase {} ;

  struct DIEP0INTF : public RegisterBase<0x50000908, 32, ReadWriteMode>
  {
    using TXFE = USBFS_DEVICE_DIEP0INTF_TXFE_Values<USBFS_DEVICE::DIEP0INTF, 7, 1, ReadMode, USBFS_DEVICEDIEP0INTFBase> ;
    using IEPNE = USBFS_DEVICE_DIEP0INTF_IEPNE_Values<USBFS_DEVICE::DIEP0INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDIEP0INTFBase> ;
    using EPTXFUD = USBFS_DEVICE_DIEP0INTF_EPTXFUD_Values<USBFS_DEVICE::DIEP0INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDIEP0INTFBase> ;
    using CITO = USBFS_DEVICE_DIEP0INTF_CITO_Values<USBFS_DEVICE::DIEP0INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDIEP0INTFBase> ;
    using EPDIS = USBFS_DEVICE_DIEP0INTF_EPDIS_Values<USBFS_DEVICE::DIEP0INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDIEP0INTFBase> ;
    using TF = USBFS_DEVICE_DIEP0INTF_TF_Values<USBFS_DEVICE::DIEP0INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDIEP0INTFBase> ;
    using FieldValues = USBFS_DEVICE_DIEP0INTF_TF_Values<USBFS_DEVICE::DIEP0INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP0INTFPack  = Register<0x50000908, 32, ReadWriteMode, USBFS_DEVICEDIEP0INTFBase, T...> ;

  struct USBFS_DEVICEDIEP1INTFBase {} ;

  struct DIEP1INTF : public RegisterBase<0x50000928, 32, ReadWriteMode>
  {
    using TXFE = USBFS_DEVICE_DIEP1INTF_TXFE_Values<USBFS_DEVICE::DIEP1INTF, 7, 1, ReadMode, USBFS_DEVICEDIEP1INTFBase> ;
    using IEPNE = USBFS_DEVICE_DIEP1INTF_IEPNE_Values<USBFS_DEVICE::DIEP1INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDIEP1INTFBase> ;
    using EPTXFUD = USBFS_DEVICE_DIEP1INTF_EPTXFUD_Values<USBFS_DEVICE::DIEP1INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDIEP1INTFBase> ;
    using CITO = USBFS_DEVICE_DIEP1INTF_CITO_Values<USBFS_DEVICE::DIEP1INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDIEP1INTFBase> ;
    using EPDIS = USBFS_DEVICE_DIEP1INTF_EPDIS_Values<USBFS_DEVICE::DIEP1INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDIEP1INTFBase> ;
    using TF = USBFS_DEVICE_DIEP1INTF_TF_Values<USBFS_DEVICE::DIEP1INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDIEP1INTFBase> ;
    using FieldValues = USBFS_DEVICE_DIEP1INTF_TF_Values<USBFS_DEVICE::DIEP1INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP1INTFPack  = Register<0x50000928, 32, ReadWriteMode, USBFS_DEVICEDIEP1INTFBase, T...> ;

  struct USBFS_DEVICEDIEP2INTFBase {} ;

  struct DIEP2INTF : public RegisterBase<0x50000948, 32, ReadWriteMode>
  {
    using TXFE = USBFS_DEVICE_DIEP2INTF_TXFE_Values<USBFS_DEVICE::DIEP2INTF, 7, 1, ReadMode, USBFS_DEVICEDIEP2INTFBase> ;
    using IEPNE = USBFS_DEVICE_DIEP2INTF_IEPNE_Values<USBFS_DEVICE::DIEP2INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDIEP2INTFBase> ;
    using EPTXFUD = USBFS_DEVICE_DIEP2INTF_EPTXFUD_Values<USBFS_DEVICE::DIEP2INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDIEP2INTFBase> ;
    using CITO = USBFS_DEVICE_DIEP2INTF_CITO_Values<USBFS_DEVICE::DIEP2INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDIEP2INTFBase> ;
    using EPDIS = USBFS_DEVICE_DIEP2INTF_EPDIS_Values<USBFS_DEVICE::DIEP2INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDIEP2INTFBase> ;
    using TF = USBFS_DEVICE_DIEP2INTF_TF_Values<USBFS_DEVICE::DIEP2INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDIEP2INTFBase> ;
    using FieldValues = USBFS_DEVICE_DIEP2INTF_TF_Values<USBFS_DEVICE::DIEP2INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP2INTFPack  = Register<0x50000948, 32, ReadWriteMode, USBFS_DEVICEDIEP2INTFBase, T...> ;

  struct USBFS_DEVICEDIEP3INTFBase {} ;

  struct DIEP3INTF : public RegisterBase<0x50000968, 32, ReadWriteMode>
  {
    using TXFE = USBFS_DEVICE_DIEP3INTF_TXFE_Values<USBFS_DEVICE::DIEP3INTF, 7, 1, ReadMode, USBFS_DEVICEDIEP3INTFBase> ;
    using IEPNE = USBFS_DEVICE_DIEP3INTF_IEPNE_Values<USBFS_DEVICE::DIEP3INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDIEP3INTFBase> ;
    using EPTXFUD = USBFS_DEVICE_DIEP3INTF_EPTXFUD_Values<USBFS_DEVICE::DIEP3INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDIEP3INTFBase> ;
    using CITO = USBFS_DEVICE_DIEP3INTF_CITO_Values<USBFS_DEVICE::DIEP3INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDIEP3INTFBase> ;
    using EPDIS = USBFS_DEVICE_DIEP3INTF_EPDIS_Values<USBFS_DEVICE::DIEP3INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDIEP3INTFBase> ;
    using TF = USBFS_DEVICE_DIEP3INTF_TF_Values<USBFS_DEVICE::DIEP3INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDIEP3INTFBase> ;
    using FieldValues = USBFS_DEVICE_DIEP3INTF_TF_Values<USBFS_DEVICE::DIEP3INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP3INTFPack  = Register<0x50000968, 32, ReadWriteMode, USBFS_DEVICEDIEP3INTFBase, T...> ;

  struct USBFS_DEVICEDOEP0INTFBase {} ;

  struct DOEP0INTF : public RegisterBase<0x50000B08, 32, ReadWriteMode>
  {
    using BTBSTP = USBFS_DEVICE_DOEP0INTF_BTBSTP_Values<USBFS_DEVICE::DOEP0INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDOEP0INTFBase> ;
    using EPRXFOVR = USBFS_DEVICE_DOEP0INTF_EPRXFOVR_Values<USBFS_DEVICE::DOEP0INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDOEP0INTFBase> ;
    using STPF = USBFS_DEVICE_DOEP0INTF_STPF_Values<USBFS_DEVICE::DOEP0INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDOEP0INTFBase> ;
    using EPDIS = USBFS_DEVICE_DOEP0INTF_EPDIS_Values<USBFS_DEVICE::DOEP0INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDOEP0INTFBase> ;
    using TF = USBFS_DEVICE_DOEP0INTF_TF_Values<USBFS_DEVICE::DOEP0INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDOEP0INTFBase> ;
    using FieldValues = USBFS_DEVICE_DOEP0INTF_TF_Values<USBFS_DEVICE::DOEP0INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP0INTFPack  = Register<0x50000B08, 32, ReadWriteMode, USBFS_DEVICEDOEP0INTFBase, T...> ;

  struct USBFS_DEVICEDOEP1INTFBase {} ;

  struct DOEP1INTF : public RegisterBase<0x50000B28, 32, ReadWriteMode>
  {
    using BTBSTP = USBFS_DEVICE_DOEP1INTF_BTBSTP_Values<USBFS_DEVICE::DOEP1INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDOEP1INTFBase> ;
    using EPRXFOVR = USBFS_DEVICE_DOEP1INTF_EPRXFOVR_Values<USBFS_DEVICE::DOEP1INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDOEP1INTFBase> ;
    using STPF = USBFS_DEVICE_DOEP1INTF_STPF_Values<USBFS_DEVICE::DOEP1INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDOEP1INTFBase> ;
    using EPDIS = USBFS_DEVICE_DOEP1INTF_EPDIS_Values<USBFS_DEVICE::DOEP1INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDOEP1INTFBase> ;
    using TF = USBFS_DEVICE_DOEP1INTF_TF_Values<USBFS_DEVICE::DOEP1INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDOEP1INTFBase> ;
    using FieldValues = USBFS_DEVICE_DOEP1INTF_TF_Values<USBFS_DEVICE::DOEP1INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP1INTFPack  = Register<0x50000B28, 32, ReadWriteMode, USBFS_DEVICEDOEP1INTFBase, T...> ;

  struct USBFS_DEVICEDOEP2INTFBase {} ;

  struct DOEP2INTF : public RegisterBase<0x50000B48, 32, ReadWriteMode>
  {
    using BTBSTP = USBFS_DEVICE_DOEP2INTF_BTBSTP_Values<USBFS_DEVICE::DOEP2INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDOEP2INTFBase> ;
    using EPRXFOVR = USBFS_DEVICE_DOEP2INTF_EPRXFOVR_Values<USBFS_DEVICE::DOEP2INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDOEP2INTFBase> ;
    using STPF = USBFS_DEVICE_DOEP2INTF_STPF_Values<USBFS_DEVICE::DOEP2INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDOEP2INTFBase> ;
    using EPDIS = USBFS_DEVICE_DOEP2INTF_EPDIS_Values<USBFS_DEVICE::DOEP2INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDOEP2INTFBase> ;
    using TF = USBFS_DEVICE_DOEP2INTF_TF_Values<USBFS_DEVICE::DOEP2INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDOEP2INTFBase> ;
    using FieldValues = USBFS_DEVICE_DOEP2INTF_TF_Values<USBFS_DEVICE::DOEP2INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP2INTFPack  = Register<0x50000B48, 32, ReadWriteMode, USBFS_DEVICEDOEP2INTFBase, T...> ;

  struct USBFS_DEVICEDOEP3INTFBase {} ;

  struct DOEP3INTF : public RegisterBase<0x50000B68, 32, ReadWriteMode>
  {
    using BTBSTP = USBFS_DEVICE_DOEP3INTF_BTBSTP_Values<USBFS_DEVICE::DOEP3INTF, 6, 1, ReadWriteMode, USBFS_DEVICEDOEP3INTFBase> ;
    using EPRXFOVR = USBFS_DEVICE_DOEP3INTF_EPRXFOVR_Values<USBFS_DEVICE::DOEP3INTF, 4, 1, ReadWriteMode, USBFS_DEVICEDOEP3INTFBase> ;
    using STPF = USBFS_DEVICE_DOEP3INTF_STPF_Values<USBFS_DEVICE::DOEP3INTF, 3, 1, ReadWriteMode, USBFS_DEVICEDOEP3INTFBase> ;
    using EPDIS = USBFS_DEVICE_DOEP3INTF_EPDIS_Values<USBFS_DEVICE::DOEP3INTF, 1, 1, ReadWriteMode, USBFS_DEVICEDOEP3INTFBase> ;
    using TF = USBFS_DEVICE_DOEP3INTF_TF_Values<USBFS_DEVICE::DOEP3INTF, 0, 1, ReadWriteMode, USBFS_DEVICEDOEP3INTFBase> ;
    using FieldValues = USBFS_DEVICE_DOEP3INTF_TF_Values<USBFS_DEVICE::DOEP3INTF, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP3INTFPack  = Register<0x50000B68, 32, ReadWriteMode, USBFS_DEVICEDOEP3INTFBase, T...> ;

  struct USBFS_DEVICEDIEP0LENBase {} ;

  struct DIEP0LEN : public RegisterBase<0x50000910, 32, ReadWriteMode>
  {
    using PCNT = USBFS_DEVICE_DIEP0LEN_PCNT_Values<USBFS_DEVICE::DIEP0LEN, 19, 2, ReadWriteMode, USBFS_DEVICEDIEP0LENBase> ;
    using TLEN = USBFS_DEVICE_DIEP0LEN_TLEN_Values<USBFS_DEVICE::DIEP0LEN, 0, 7, ReadWriteMode, USBFS_DEVICEDIEP0LENBase> ;
    using FieldValues = USBFS_DEVICE_DIEP0LEN_TLEN_Values<USBFS_DEVICE::DIEP0LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP0LENPack  = Register<0x50000910, 32, ReadWriteMode, USBFS_DEVICEDIEP0LENBase, T...> ;

  struct USBFS_DEVICEDOEP0LENBase {} ;

  struct DOEP0LEN : public RegisterBase<0x50000B10, 32, ReadWriteMode>
  {
    using STPCNT = USBFS_DEVICE_DOEP0LEN_STPCNT_Values<USBFS_DEVICE::DOEP0LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDOEP0LENBase> ;
    using PCNT = USBFS_DEVICE_DOEP0LEN_PCNT_Values<USBFS_DEVICE::DOEP0LEN, 19, 1, ReadWriteMode, USBFS_DEVICEDOEP0LENBase> ;
    using TLEN = USBFS_DEVICE_DOEP0LEN_TLEN_Values<USBFS_DEVICE::DOEP0LEN, 0, 7, ReadWriteMode, USBFS_DEVICEDOEP0LENBase> ;
    using FieldValues = USBFS_DEVICE_DOEP0LEN_TLEN_Values<USBFS_DEVICE::DOEP0LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP0LENPack  = Register<0x50000B10, 32, ReadWriteMode, USBFS_DEVICEDOEP0LENBase, T...> ;

  struct USBFS_DEVICEDIEP1LENBase {} ;

  struct DIEP1LEN : public RegisterBase<0x50000930, 32, ReadWriteMode>
  {
    using MCPF = USBFS_DEVICE_DIEP1LEN_MCPF_Values<USBFS_DEVICE::DIEP1LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDIEP1LENBase> ;
    using PCNT = USBFS_DEVICE_DIEP1LEN_PCNT_Values<USBFS_DEVICE::DIEP1LEN, 19, 10, ReadWriteMode, USBFS_DEVICEDIEP1LENBase> ;
    using TLEN = USBFS_DEVICE_DIEP1LEN_TLEN_Values<USBFS_DEVICE::DIEP1LEN, 0, 19, ReadWriteMode, USBFS_DEVICEDIEP1LENBase> ;
    using FieldValues = USBFS_DEVICE_DIEP1LEN_TLEN_Values<USBFS_DEVICE::DIEP1LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP1LENPack  = Register<0x50000930, 32, ReadWriteMode, USBFS_DEVICEDIEP1LENBase, T...> ;

  struct USBFS_DEVICEDIEP2LENBase {} ;

  struct DIEP2LEN : public RegisterBase<0x50000950, 32, ReadWriteMode>
  {
    using MCPF = USBFS_DEVICE_DIEP2LEN_MCPF_Values<USBFS_DEVICE::DIEP2LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDIEP2LENBase> ;
    using PCNT = USBFS_DEVICE_DIEP2LEN_PCNT_Values<USBFS_DEVICE::DIEP2LEN, 19, 10, ReadWriteMode, USBFS_DEVICEDIEP2LENBase> ;
    using TLEN = USBFS_DEVICE_DIEP2LEN_TLEN_Values<USBFS_DEVICE::DIEP2LEN, 0, 19, ReadWriteMode, USBFS_DEVICEDIEP2LENBase> ;
    using FieldValues = USBFS_DEVICE_DIEP2LEN_TLEN_Values<USBFS_DEVICE::DIEP2LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP2LENPack  = Register<0x50000950, 32, ReadWriteMode, USBFS_DEVICEDIEP2LENBase, T...> ;

  struct USBFS_DEVICEDIEP3LENBase {} ;

  struct DIEP3LEN : public RegisterBase<0x50000970, 32, ReadWriteMode>
  {
    using MCPF = USBFS_DEVICE_DIEP3LEN_MCPF_Values<USBFS_DEVICE::DIEP3LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDIEP3LENBase> ;
    using PCNT = USBFS_DEVICE_DIEP3LEN_PCNT_Values<USBFS_DEVICE::DIEP3LEN, 19, 10, ReadWriteMode, USBFS_DEVICEDIEP3LENBase> ;
    using TLEN = USBFS_DEVICE_DIEP3LEN_TLEN_Values<USBFS_DEVICE::DIEP3LEN, 0, 19, ReadWriteMode, USBFS_DEVICEDIEP3LENBase> ;
    using FieldValues = USBFS_DEVICE_DIEP3LEN_TLEN_Values<USBFS_DEVICE::DIEP3LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP3LENPack  = Register<0x50000970, 32, ReadWriteMode, USBFS_DEVICEDIEP3LENBase, T...> ;

  struct USBFS_DEVICEDOEP1LENBase {} ;

  struct DOEP1LEN : public RegisterBase<0x50000B30, 32, ReadWriteMode>
  {
    using STPCNT_RXDPID = USBFS_DEVICE_DOEP1LEN_STPCNT_RXDPID_Values<USBFS_DEVICE::DOEP1LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDOEP1LENBase> ;
    using PCNT = USBFS_DEVICE_DOEP1LEN_PCNT_Values<USBFS_DEVICE::DOEP1LEN, 19, 10, ReadWriteMode, USBFS_DEVICEDOEP1LENBase> ;
    using TLEN = USBFS_DEVICE_DOEP1LEN_TLEN_Values<USBFS_DEVICE::DOEP1LEN, 0, 19, ReadWriteMode, USBFS_DEVICEDOEP1LENBase> ;
    using FieldValues = USBFS_DEVICE_DOEP1LEN_TLEN_Values<USBFS_DEVICE::DOEP1LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP1LENPack  = Register<0x50000B30, 32, ReadWriteMode, USBFS_DEVICEDOEP1LENBase, T...> ;

  struct USBFS_DEVICEDOEP2LENBase {} ;

  struct DOEP2LEN : public RegisterBase<0x50000B50, 32, ReadWriteMode>
  {
    using STPCNT_RXDPID = USBFS_DEVICE_DOEP2LEN_STPCNT_RXDPID_Values<USBFS_DEVICE::DOEP2LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDOEP2LENBase> ;
    using PCNT = USBFS_DEVICE_DOEP2LEN_PCNT_Values<USBFS_DEVICE::DOEP2LEN, 19, 10, ReadWriteMode, USBFS_DEVICEDOEP2LENBase> ;
    using TLEN = USBFS_DEVICE_DOEP2LEN_TLEN_Values<USBFS_DEVICE::DOEP2LEN, 0, 19, ReadWriteMode, USBFS_DEVICEDOEP2LENBase> ;
    using FieldValues = USBFS_DEVICE_DOEP2LEN_TLEN_Values<USBFS_DEVICE::DOEP2LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP2LENPack  = Register<0x50000B50, 32, ReadWriteMode, USBFS_DEVICEDOEP2LENBase, T...> ;

  struct USBFS_DEVICEDOEP3LENBase {} ;

  struct DOEP3LEN : public RegisterBase<0x50000B70, 32, ReadWriteMode>
  {
    using STPCNT_RXDPID = USBFS_DEVICE_DOEP3LEN_STPCNT_RXDPID_Values<USBFS_DEVICE::DOEP3LEN, 29, 2, ReadWriteMode, USBFS_DEVICEDOEP3LENBase> ;
    using PCNT = USBFS_DEVICE_DOEP3LEN_PCNT_Values<USBFS_DEVICE::DOEP3LEN, 19, 10, ReadWriteMode, USBFS_DEVICEDOEP3LENBase> ;
    using TLEN = USBFS_DEVICE_DOEP3LEN_TLEN_Values<USBFS_DEVICE::DOEP3LEN, 0, 19, ReadWriteMode, USBFS_DEVICEDOEP3LENBase> ;
    using FieldValues = USBFS_DEVICE_DOEP3LEN_TLEN_Values<USBFS_DEVICE::DOEP3LEN, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DOEP3LENPack  = Register<0x50000B70, 32, ReadWriteMode, USBFS_DEVICEDOEP3LENBase, T...> ;

  struct USBFS_DEVICEDIEP0TFSTATBase {} ;

  struct DIEP0TFSTAT : public RegisterBase<0x50000918, 32, ReadMode>
  {
    using IEPTFS = USBFS_DEVICE_DIEP0TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP0TFSTAT, 0, 16, ReadMode, USBFS_DEVICEDIEP0TFSTATBase> ;
    using FieldValues = USBFS_DEVICE_DIEP0TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP0TFSTAT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP0TFSTATPack  = Register<0x50000918, 32, ReadMode, USBFS_DEVICEDIEP0TFSTATBase, T...> ;

  struct USBFS_DEVICEDIEP1TFSTATBase {} ;

  struct DIEP1TFSTAT : public RegisterBase<0x50000938, 32, ReadMode>
  {
    using IEPTFS = USBFS_DEVICE_DIEP1TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP1TFSTAT, 0, 16, ReadMode, USBFS_DEVICEDIEP1TFSTATBase> ;
    using FieldValues = USBFS_DEVICE_DIEP1TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP1TFSTAT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP1TFSTATPack  = Register<0x50000938, 32, ReadMode, USBFS_DEVICEDIEP1TFSTATBase, T...> ;

  struct USBFS_DEVICEDIEP2TFSTATBase {} ;

  struct DIEP2TFSTAT : public RegisterBase<0x50000958, 32, ReadMode>
  {
    using IEPTFS = USBFS_DEVICE_DIEP2TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP2TFSTAT, 0, 16, ReadMode, USBFS_DEVICEDIEP2TFSTATBase> ;
    using FieldValues = USBFS_DEVICE_DIEP2TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP2TFSTAT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP2TFSTATPack  = Register<0x50000958, 32, ReadMode, USBFS_DEVICEDIEP2TFSTATBase, T...> ;

  struct USBFS_DEVICEDIEP3TFSTATBase {} ;

  struct DIEP3TFSTAT : public RegisterBase<0x50000978, 32, ReadMode>
  {
    using IEPTFS = USBFS_DEVICE_DIEP3TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP3TFSTAT, 0, 16, ReadMode, USBFS_DEVICEDIEP3TFSTATBase> ;
    using FieldValues = USBFS_DEVICE_DIEP3TFSTAT_IEPTFS_Values<USBFS_DEVICE::DIEP3TFSTAT, 0, 0, NoAccess, NoAccess> ;
  } ;

  template<typename... T> 
  using DIEP3TFSTATPack  = Register<0x50000978, 32, ReadMode, USBFS_DEVICEDIEP3TFSTATBase, T...> ;

} ;

#endif //#if !defined(USBFSDEVICEREGISTERS_HPP)
